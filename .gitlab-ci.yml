stages:
  - build
  - test
  - deploy


build-image:
  image: docker:cli
  stage: build
  services:
    - docker:dind
  variables:
    BASE_IMAGE_NAME: $CI_REGISTRY_IMAGE
    DOCKER_IMAGE_NAME: $BASE_IMAGE_NAME:$CI_COMMIT_REF_SLUG
  before_script:
  #   - 'which ssh-agent || ( apt-get install -qq openssh-client )'
  #   - eval $(ssh-agent -s)
  #   - ssh-add <(echo "$SSH_PRIVATE_KEY")
  #   - mkdir -p ~/.ssh
  #   - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    # - docker build --build-arg SSH_PRIVATE_KEY="$SSH_PRIVATE_KEY" -f manifest/core.Dockerfile --target runner -t "$DOCKER_IMAGE_NAME" .
    - docker build -f Dockerfile -t "$DOCKER_IMAGE_NAME" .
    - docker push "$DOCKER_IMAGE_NAME"
    - |
      if [[ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]]; then
        docker tag "$DOCKER_IMAGE_NAME" "$BASE_IMAGE_NAME:latest"
        docker push "$BASE_IMAGE_NAME:latest"
      fi
  rules:
    - if: $CI_COMMIT_BRANCH
      exists:
        - Dockerfile

# unit-test-job:   # This job runs in the test stage.
#   stage: test    # It only starts when the job in the build stage completes successfully.
#   script:
#     - echo "Running unit tests... This will take about 60 seconds."
#     - sleep 60
#     - echo "Code coverage is 90%"

# lint-test-job:   # This job also runs in the test stage.
#   stage: test    # It can run at the same time as unit-test-job (in parallel).
#   script:
#     - echo "Linting code... This will take about 10 seconds."
#     - sleep 10
#     - echo "No lint issues found."

# deploy-dev:      # This job runs in the deploy stage.
#   stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
#   environment: dev
#   script:
#     - echo "Deploying application..."
#     - echo "Application successfully deployed."
#   only:
#     - develop

# deploy-prod:      # This job runs in the deploy stage.
#   stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
#   environment: production
#   script:
#     - echo "Deploying application..."
#     - echo "Application successfully deployed."
#   only:
#     - master